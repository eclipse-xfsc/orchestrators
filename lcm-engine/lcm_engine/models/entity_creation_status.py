# coding: utf-8

from __future__ import absolute_import


from lcm_engine.models.base_model_ import Model
from lcm_engine import util


class EntityCreationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finished=None, status=None):  # noqa: E501
        """EntityCreationStatus - a model defined in OpenAPI

        :param finished: The finished of this EntityCreationStatus.  # noqa: E501
        :type finished: bool
        :param status: The status of this EntityCreationStatus.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {"finished": bool, "status": str}

        self.attribute_map = {"finished": "finished", "status": "status"}

        self.finished = finished
        self.status = status

    @classmethod
    def from_dict(cls, dikt) -> "EntityCreationStatus":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityCreationStatus of this EntityCreationStatus.  # noqa: E501
        :rtype: EntityCreationStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finished(self):
        """Gets the finished of this EntityCreationStatus.


        :return: The finished of this EntityCreationStatus.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this EntityCreationStatus.


        :param finished: The finished of this EntityCreationStatus.
        :type finished: bool
        """
        if finished is None:
            raise ValueError(
                "Invalid value for `finished`, must not be `None`"
            )  # noqa: E501

        self._finished = finished

    @property
    def status(self):
        """Gets the status of this EntityCreationStatus.


        :return: The status of this EntityCreationStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EntityCreationStatus.


        :param status: The status of this EntityCreationStatus.
        :type status: str
        """
        if status is None:
            raise ValueError(
                "Invalid value for `status`, must not be `None`"
            )  # noqa: E501

        self._status = status
