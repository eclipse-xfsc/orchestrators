# coding: utf-8

from __future__ import absolute_import


from lcm_engine.models.base_model_ import Model
from lcm_engine.models.connectivity_health import ConnectivityHealth
from lcm_engine.models.container_health import ContainerHealth
from lcm_engine import util

from lcm_engine.models.connectivity_health import ConnectivityHealth  # noqa: E501
from lcm_engine.models.container_health import ContainerHealth  # noqa: E501


class ProjectHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container=None, connectivity=None):  # noqa: E501
        """ProjectHealth - a model defined in OpenAPI

        :param container: The container of this ProjectHealth.  # noqa: E501
        :type container: ContainerHealth
        :param connectivity: The connectivity of this ProjectHealth.  # noqa: E501
        :type connectivity: ConnectivityHealth
        """
        self.openapi_types = {
            "container": ContainerHealth,
            "connectivity": ConnectivityHealth,
        }

        self.attribute_map = {"container": "container", "connectivity": "connectivity"}

        self.container = container
        self.connectivity = connectivity

    @classmethod
    def from_dict(cls, dikt) -> "ProjectHealth":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectHealth of this ProjectHealth.  # noqa: E501
        :rtype: ProjectHealth
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this ProjectHealth.


        :return: The container of this ProjectHealth.
        :rtype: ContainerHealth
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ProjectHealth.


        :param container: The container of this ProjectHealth.
        :type container: ContainerHealth
        """
        if container is None:
            raise ValueError(
                "Invalid value for `container`, must not be `None`"
            )  # noqa: E501

        self._container = container

    @property
    def connectivity(self):
        """Gets the connectivity of this ProjectHealth.


        :return: The connectivity of this ProjectHealth.
        :rtype: ConnectivityHealth
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this ProjectHealth.


        :param connectivity: The connectivity of this ProjectHealth.
        :type connectivity: ConnectivityHealth
        """
        if connectivity is None:
            raise ValueError(
                "Invalid value for `connectivity`, must not be `None`"
            )  # noqa: E501

        self._connectivity = connectivity
