# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from lcm_engine.models.base_model_ import Model
from lcm_engine import util


class HealthResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, healthy=None, dependencies=None):  # noqa: E501
        """HealthResponse - a model defined in OpenAPI

        :param name: The name of this HealthResponse.  # noqa: E501
        :type name: str
        :param healthy: The healthy of this HealthResponse.  # noqa: E501
        :type healthy: bool
        :param dependencies: The dependencies of this HealthResponse.  # noqa: E501
        :type dependencies: List[HealthResponse]
        """
        self.openapi_types = {
            "name": str,
            "healthy": bool,
            "dependencies": List[HealthResponse],
        }

        self.attribute_map = {
            "name": "name",
            "healthy": "healthy",
            "dependencies": "dependencies",
        }

        self.name = name
        self.healthy = healthy
        self.dependencies = dependencies

    @classmethod
    def from_dict(cls, dikt) -> "HealthResponse":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthResponse of this HealthResponse.  # noqa: E501
        :rtype: HealthResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HealthResponse.


        :return: The name of this HealthResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthResponse.


        :param name: The name of this HealthResponse.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def healthy(self):
        """Gets the healthy of this HealthResponse.


        :return: The healthy of this HealthResponse.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this HealthResponse.


        :param healthy: The healthy of this HealthResponse.
        :type healthy: bool
        """
        if healthy is None:
            raise ValueError(
                "Invalid value for `healthy`, must not be `None`"
            )  # noqa: E501

        self._healthy = healthy

    @property
    def dependencies(self):
        """Gets the dependencies of this HealthResponse.


        :return: The dependencies of this HealthResponse.
        :rtype: List[HealthResponse]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this HealthResponse.


        :param dependencies: The dependencies of this HealthResponse.
        :type dependencies: List[HealthResponse]
        """

        self._dependencies = dependencies
