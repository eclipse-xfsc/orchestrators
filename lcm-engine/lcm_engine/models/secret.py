# coding: utf-8

from __future__ import absolute_import

from typing import List, Dict  # noqa: F401

from lcm_engine.models.base_model_ import Model
from lcm_engine.models.secret_file import SecretFile
from lcm_engine import util


class Secret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, name=None, workspaces=None, file=None, env=None
    ):  # noqa: E501
        """Secret - a model defined in OpenAPI

        :param id: The id of this Secret.  # noqa: E501
        :type id: int
        :param name: The name of this Secret.  # noqa: E501
        :type name: str
        :param workspaces: The workspaces of this Secret.  # noqa: E501
        :type workspaces: List[int]
        :param file: The file of this Secret.  # noqa: E501
        :type file: SecretFile
        :param env: The env of this Secret.  # noqa: E501
        :type env: Dict[str, str]
        """
        self.openapi_types = {
            "id": int,
            "name": str,
            "workspaces": List[int],
            "file": SecretFile,
            "env": Dict[str, str],
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "workspaces": "workspaces",
            "file": "file",
            "env": "env",
        }

        self._id = id
        self._name = name
        self._workspaces = workspaces
        self._file = file
        self._env = env

    @classmethod
    def from_dict(cls, dikt) -> "Secret":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Secret of this Secret.  # noqa: E501
        :rtype: Secret
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Secret.


        :return: The id of this Secret.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Secret.


        :param id: The id of this Secret.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Secret.


        :return: The name of this Secret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Secret.


        :param name: The name of this Secret.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def workspaces(self):
        """Gets the workspaces of this Secret.


        :return: The workspaces of this Secret.
        :rtype: List[int]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this Secret.


        :param workspaces: The workspaces of this Secret.
        :type workspaces: List[int]
        """
        if workspaces is None:
            raise ValueError(
                "Invalid value for `workspaces`, must not be `None`"
            )  # noqa: E501

        self._workspaces = workspaces

    @property
    def file(self):
        """Gets the file of this Secret.


        :return: The file of this Secret.
        :rtype: SecretFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Secret.


        :param file: The file of this Secret.
        :type file: SecretFile
        """

        self._file = file

    @property
    def env(self):
        """Gets the env of this Secret.


        :return: The env of this Secret.
        :rtype: Dict[str, str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Secret.


        :param env: The env of this Secret.
        :type env: Dict[str, str]
        """

        self._env = env
