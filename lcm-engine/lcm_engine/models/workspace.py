# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from lcm_engine.models.base_model_ import Model
from lcm_engine import util


class Workspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, name=None, secrets=None, projects=None, is_owner=None
    ):  # noqa: E501
        """Workspace - a model defined in OpenAPI

        :param id: The id of this Workspace.  # noqa: E501
        :type id: int
        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        :param secrets: The secrets of this Workspace.  # noqa: E501
        :type secrets: List[int]
        :param projects: The projects of this Workspace.  # noqa: E501
        :type projects: List[int]
        :param is_owner: The is_owner of this Workspace.  # noqa: E501
        :type is_owner: bool
        """
        self.openapi_types = {
            "id": int,
            "name": str,
            "secrets": List[int],
            "projects": List[int],
            "is_owner": bool,
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "secrets": "secrets",
            "projects": "projects",
            "is_owner": "isOwner",
        }

        self._id = id
        self._name = name
        self._secrets = secrets
        self._projects = projects
        self._is_owner = is_owner

    @classmethod
    def from_dict(cls, dikt) -> "Workspace":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace of this Workspace.  # noqa: E501
        :rtype: Workspace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Workspace.


        :return: The id of this Workspace.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workspace.


        :param id: The id of this Workspace.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Workspace.


        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def secrets(self):
        """Gets the secrets of this Workspace.


        :return: The secrets of this Workspace.
        :rtype: List[int]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this Workspace.


        :param secrets: The secrets of this Workspace.
        :type secrets: List[int]
        """
        if secrets is None:
            raise ValueError(
                "Invalid value for `secrets`, must not be `None`"
            )  # noqa: E501

        self._secrets = secrets

    @property
    def projects(self):
        """Gets the projects of this Workspace.


        :return: The projects of this Workspace.
        :rtype: List[int]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Workspace.


        :param projects: The projects of this Workspace.
        :type projects: List[int]
        """
        if projects is None:
            raise ValueError(
                "Invalid value for `projects`, must not be `None`"
            )  # noqa: E501

        self._projects = projects

    @property
    def is_owner(self):
        """Gets the is_owner of this Workspace.


        :return: The is_owner of this Workspace.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this Workspace.


        :param is_owner: The is_owner of this Workspace.
        :type is_owner: bool
        """
        if is_owner is None:
            raise ValueError(
                "Invalid value for `is_owner`, must not be `None`"
            )  # noqa: E501

        self._is_owner = is_owner
