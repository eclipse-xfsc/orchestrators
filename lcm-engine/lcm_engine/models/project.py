# coding: utf-8

from __future__ import absolute_import


from lcm_engine.models.base_model_ import Model
from lcm_engine import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, name=None, workspace=None, csar=None, kind=None
    ):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param id: The id of this Project.  # noqa: E501
        :type id: int
        :param name: The name of this Project.  # noqa: E501
        :type name: str
        :param workspace: The workspace of this Project.  # noqa: E501
        :type workspace: int
        :param csar: The csar of this Project.  # noqa: E501
        :type csar: str
        :param kind: The kind of this Project.  # noqa: E501
        :type kind: str
        """
        self.openapi_types = {
            "id": int,
            "name": str,
            "workspace": int,
            "csar": str,
            "kind": str,
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "workspace": "workspace",
            "csar": "csar",
            "kind": "kind",
        }

        self._id = id
        self._name = name
        self._workspace = workspace
        self._csar = csar
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt) -> "Project":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def workspace(self):
        """Gets the workspace of this Project.


        :return: The workspace of this Project.
        :rtype: int
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Project.


        :param workspace: The workspace of this Project.
        :type workspace: int
        """
        if workspace is None:
            raise ValueError(
                "Invalid value for `workspace`, must not be `None`"
            )  # noqa: E501

        self._workspace = workspace

    @property
    def csar(self):
        """Gets the csar of this Project.

        Base64-encoded ZIP file of the CSAR. The service template must be top-level  # noqa: E501

        :return: The csar of this Project.
        :rtype: str
        """
        return self._csar

    @csar.setter
    def csar(self, csar):
        """Sets the csar of this Project.

        Base64-encoded ZIP file of the CSAR. The service template must be top-level  # noqa: E501

        :param csar: The csar of this Project.
        :type csar: str
        """
        if csar is None:
            raise ValueError(
                "Invalid value for `csar`, must not be `None`"
            )  # noqa: E501

        self._csar = csar

    @property
    def kind(self):
        """Gets the kind of this Project.

        Kind of a project, such as TOSCA or Terraform  # noqa: E501

        :return: The kind of this Project.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Project.

        Kind of a project, such as TOSCA or Terraform  # noqa: E501

        :param kind: The kind of this Project.
        :type kind: str
        """
        if kind is None:
            raise ValueError(
                "Invalid value for `kind`, must not be `None`"
            )  # noqa: E501

        self._kind = kind
